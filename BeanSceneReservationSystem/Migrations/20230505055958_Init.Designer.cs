// <auto-generated />
using System;
using BeanSceneReservationSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeanSceneReservationSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230505055958_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Main"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Outside"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Balcony"
                        });
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GuestNumber")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReservationSourceId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("SittingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReservationSourceId");

                    b.HasIndex("ReservationStatusId");

                    b.HasIndex("SittingId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.ReservationSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReservationSources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Online"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Email"
                        },
                        new
                        {
                            Id = 3,
                            Name = "In Person"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Phone"
                        });
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.ReservationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReservationStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Confirmed"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Seated"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Altered"
                        });
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bean Scene"
                        });
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.RestaurantTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("RestaurantTables");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Sitting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("SittingTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("SittingTypeId");

                    b.ToTable("Sittings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 6, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 6, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 6, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 6, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 6, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 6, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 7, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 7, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 7, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 7, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 7, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 7, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 8, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 8, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 8, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 8, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 8, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 8, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 9, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 9, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 11,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 9, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 9, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 12,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 9, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 9, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 13,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 10, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 10, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 14,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 10, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 10, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 15,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 10, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 10, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 16,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 11, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 11, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 17,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 11, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 11, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 18,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 11, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 11, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 19,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 12, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 12, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 20,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 12, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 12, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 21,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 12, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 12, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 22,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 13, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 13, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 23,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 13, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 13, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 24,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 13, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 13, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 25,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 14, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 14, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 26,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 14, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 14, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 27,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 14, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 14, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 28,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 15, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 15, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 29,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 15, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 15, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 30,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 15, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 15, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 31,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 16, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 16, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 32,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 16, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 16, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 33,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 16, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 16, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 34,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 17, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 17, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 35,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 17, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 17, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 36,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 17, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 17, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 37,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 18, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 18, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 38,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 18, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 18, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 39,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 18, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 18, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 40,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 19, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 19, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 41,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 19, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 19, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 42,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 19, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 19, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 43,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 20, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 20, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 44,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 20, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 20, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 45,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 20, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 20, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 46,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 21, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 21, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 47,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 21, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 21, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 48,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 21, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 21, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 49,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 22, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 22, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 50,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 22, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 22, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 51,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 22, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 22, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 52,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 23, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 23, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 53,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 23, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 23, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 54,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 23, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 23, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 55,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 24, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 24, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 56,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 24, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 24, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 57,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 24, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 24, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 58,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 25, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 25, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 59,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 25, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 25, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 60,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 25, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 25, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 61,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 26, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 26, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 62,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 26, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 26, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 63,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 26, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 26, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 64,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 27, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 27, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 65,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 27, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 27, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 66,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 27, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 27, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 67,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 28, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 28, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 68,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 28, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 28, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 69,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 28, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 28, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 70,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 29, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 29, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 71,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 29, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 29, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 72,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 29, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 29, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 73,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 30, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 30, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 74,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 30, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 30, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 75,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 30, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 30, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 76,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 31, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 31, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 77,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 31, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 31, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 78,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 31, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 31, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 79,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 6, 1, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 6, 1, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 80,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 6, 1, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 6, 1, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 81,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 6, 1, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 6, 1, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 82,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 6, 2, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 6, 2, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 83,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 6, 2, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 6, 2, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 84,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 6, 2, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 6, 2, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 85,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 6, 3, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 6, 3, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 86,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 6, 3, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 6, 3, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 87,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 6, 3, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 6, 3, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 88,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 6, 4, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 6, 4, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 89,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 6, 4, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 6, 4, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 90,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 6, 4, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 6, 4, 17, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.SittingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SittingTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Breakfast"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Lunch"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dinner"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "884f5956-9be5-4c4c-9096-00b8eff78299",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "60226d81-1906-41cb-8f00-44e34ee158cd",
                            ConcurrencyStamp = "bbabc7a0-e14d-4d6a-ba65-03ef55f74324",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "e07d60fb-e2bd-4443-9759-8edc2c65ba17",
                            ConcurrencyStamp = "c0300f0b-fa95-4b21-a10b-5b6871c57686",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e545865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7039770a-c2bf-486e-9673-f867665e3c89",
                            Email = "Manager@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@TEST.COM",
                            NormalizedUserName = "Manager@test.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEGz0Cn+ZaHZfkNYWB5MIdHDx+7DnCxn21DbA+kiBYfho0Gz6keUwtiwkZH2LRhccXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "971f49e2-7e44-47e2-bb3a-41b4aca68d9c",
                            TwoFactorEnabled = false,
                            UserName = "Manager@test.com"
                        },
                        new
                        {
                            Id = "8e645865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c666625-739d-4c2e-a2a2-500b74e7a358",
                            Email = "Staff@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@TEST.COM",
                            NormalizedUserName = "Staff@test.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEKOzKv0dsEltS83atOp7PWtuSig0OVPG+yppAQ92VER07lTUsJsQLyIvqK96ZLpKZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e853eef-29e5-4872-b7d3-f713833d0824",
                            TwoFactorEnabled = false,
                            UserName = "Staff@test.com"
                        },
                        new
                        {
                            Id = "8l645865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59152a59-b944-436e-9813-faddd2a73388",
                            Email = "a@a.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "A@A.COM",
                            NormalizedUserName = "JOHN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBs25GS2mvm61DzS1zoPfqCHpnoEvbqNs23A2OIZ0rAGZrVC73PnZyQVLsGqgJTRgQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54464cd6-58f2-4172-b6f3-186cf461bd8d",
                            TwoFactorEnabled = false,
                            UserName = "John"
                        },
                        new
                        {
                            Id = "8l645865-b24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d70ff424-b18d-489b-857b-c4e31405684f",
                            Email = "b@b.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "B@B.COM",
                            NormalizedUserName = "FRED",
                            PasswordHash = "AQAAAAEAACcQAAAAEI8kgAHptZlekVx+mRuBCNKzRB3EFITZcvAhpXKutbgCceJraUgYZAnUwrIXh2q6/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bfdd0c67-3efe-453b-9a04-3d30d22ab9a5",
                            TwoFactorEnabled = false,
                            UserName = "Fred"
                        },
                        new
                        {
                            Id = "8l645865-c24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1019a078-6ea6-4069-9589-c73c30b96541",
                            Email = "c@c.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "C@C.COM",
                            NormalizedUserName = "SARAH",
                            PasswordHash = "AQAAAAEAACcQAAAAEFyGigWzS+s8RnMSTkNsE5sEzSusQJZKA+O9QN6lruuCXuZghC1rKgV1XBTGe5tqfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed20d055-2baf-445a-9d08-3648c15f35e1",
                            TwoFactorEnabled = false,
                            UserName = "Sarah"
                        },
                        new
                        {
                            Id = "8l645865-d24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62ea0491-88c3-422e-af95-a71021f05fab",
                            Email = "d@d.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "D@D.COM",
                            NormalizedUserName = "LOUSIE",
                            PasswordHash = "AQAAAAEAACcQAAAAEICEQOp4sJUZ50kN/fPpSfY4YV0DXM0ESfReqFla5mMUzZoNmnTLIjooiTPIXr1ZEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "425a7dda-f2c5-43e9-9bd0-a45b309ea155",
                            TwoFactorEnabled = false,
                            UserName = "Lousie"
                        },
                        new
                        {
                            Id = "8l645865-e24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01ddbbcb-2f10-4352-ba15-e658b4f61593",
                            Email = "e@e.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "E@E.COM",
                            NormalizedUserName = "KATIE",
                            PasswordHash = "AQAAAAEAACcQAAAAEMSbcohNh0twoomU2fTE8JXN4b+ciwoLBUN/SK7Drd8CtgOT1KuiCBlallC4iETVHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b641dcf4-af98-452b-ae3c-58ac5bf900ac",
                            TwoFactorEnabled = false,
                            UserName = "Katie"
                        },
                        new
                        {
                            Id = "8l645865-f24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30c8aa29-744a-46f7-9ab2-d89ad55b9fd5",
                            Email = "f@f.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "F@F.COM",
                            NormalizedUserName = "BEN",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwDRyjGHBVZ407//jB6rZPqEsTwYvoeDPkTlWBocoAJ/KzbbY6zdpbWtBROkge7zA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b39a64b9-8275-4c74-8703-78aff2f702f5",
                            TwoFactorEnabled = false,
                            UserName = "Ben"
                        },
                        new
                        {
                            Id = "8l645865-g24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4974c779-2a12-4d7b-85d8-6ecd20b0baba",
                            Email = "g@g.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "G@G.COM",
                            NormalizedUserName = "LUCAS",
                            PasswordHash = "AQAAAAEAACcQAAAAENpNoAtktTEEk0kCmGU1NS3rUYhxRoFxL1euTOdpYERLrPzCCiAX1VI72CEWQClYFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ed80b78-b37a-4452-b857-286eb6411ff3",
                            TwoFactorEnabled = false,
                            UserName = "Lucas"
                        },
                        new
                        {
                            Id = "8l645865-h24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f43d5d0b-fd4e-4464-acce-3703fb192dea",
                            Email = "h@h.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "H@H.COM",
                            NormalizedUserName = "LIAM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKPxz/K7olUaRaWUAaOJA3XVlU2zG4SpN2/WDbt1fCKH4vim/bkJJnfpLYlRXnNrZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ed789ab-674b-4f04-aeea-ad67e49bbcaf",
                            TwoFactorEnabled = false,
                            UserName = "Liam"
                        },
                        new
                        {
                            Id = "8l645865-i24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b90b0eb-42e4-4583-9e4a-c84e4414bf53",
                            Email = "i@i.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "I@I.COM",
                            NormalizedUserName = "EMMA",
                            PasswordHash = "AQAAAAEAACcQAAAAEH/DZypiu0Wmqrv4OPZiHlJzSI3fvRhPpC2wqAPD4+D5t9BE3DSHi9I6bi9emgc8Dw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22d0cb42-b10d-44a9-aaf0-6da6ac58f42e",
                            TwoFactorEnabled = false,
                            UserName = "Emma"
                        },
                        new
                        {
                            Id = "8l645865-j24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8986861b-7d9e-4805-8b9d-532b9e6d2914",
                            Email = "j@j.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "J@J.COM",
                            NormalizedUserName = "KAYLA",
                            PasswordHash = "AQAAAAEAACcQAAAAEGyToaOz81IFY85iLEkGWjbNlI32cbZZNeYpPRURq9tj0m3xVleZElzfYp2Zt0iVIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97f06428-158c-40d1-8d6b-b5a9ffd72376",
                            TwoFactorEnabled = false,
                            UserName = "Kayla"
                        },
                        new
                        {
                            Id = "8l645865-k24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38f3f507-ee82-4e02-bd80-5014be80f676",
                            Email = "k@k.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "K@K.COM",
                            NormalizedUserName = "LEVI",
                            PasswordHash = "AQAAAAEAACcQAAAAELcx+6G2cg2XqPXhw7aJ5OPHEeBQof28f5QysOLK7HTaeZXaiPxoqNm+u3ABN4hB/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76f53e1b-111e-4d05-8a9e-b97a93b8b184",
                            TwoFactorEnabled = false,
                            UserName = "Levi"
                        },
                        new
                        {
                            Id = "8l645865-l24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5ace922-0378-4fd8-872c-3bd9913a8abd",
                            Email = "l@l.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "L@L.COM",
                            NormalizedUserName = "NOAH",
                            PasswordHash = "AQAAAAEAACcQAAAAEB3OxbzXGZYxtAxGOnwcRrzZSt3Z30nOe4xSDD7Tzk9dyqCsuVxhEEKgEUl1ICikcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07e493c2-4baf-4e2f-ac65-9e8be89b95e9",
                            TwoFactorEnabled = false,
                            UserName = "Noah"
                        },
                        new
                        {
                            Id = "8l645865-m24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69c4bd6e-330f-497b-af1e-f673eec74ac1",
                            Email = "m@m.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "M@M.COM",
                            NormalizedUserName = "OLIVER",
                            PasswordHash = "AQAAAAEAACcQAAAAEH/cIOm9oDtUGBVEvyeqVM5agYxqDh6TYn7sM7mq7wk9vm+T/FeGLRIVANADo3ciQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dbcaf758-39cc-4d65-be7a-10a55012a1c2",
                            TwoFactorEnabled = false,
                            UserName = "Oliver"
                        },
                        new
                        {
                            Id = "8l645865-n24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c0a096d-7c38-4f20-a695-0565dfec1a03",
                            Email = "n@n.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "N@N.COM",
                            NormalizedUserName = "LEO",
                            PasswordHash = "AQAAAAEAACcQAAAAEGrwPgZVwhxGTdgyat8ANnrhSK19yOStuKrIIYD7+tLNz15bhMvpVQ+oIP9dJbjEjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e75cea1-b06c-405f-b664-b3e73a353361",
                            TwoFactorEnabled = false,
                            UserName = "Leo"
                        },
                        new
                        {
                            Id = "8l645865-o24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4ace7d3-a0f6-492c-9641-948addbcdbb3",
                            Email = "o@o.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "O@O.COM",
                            NormalizedUserName = "WYATT",
                            PasswordHash = "AQAAAAEAACcQAAAAEPcz1dMWC7e1+FN9wRlpGj4R9Ja4f4mf8KZntOZgcWDPITV2OGkSimlSO0u8fvWe3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "afd5965a-9a0d-458b-9ade-f3d7028c7d39",
                            TwoFactorEnabled = false,
                            UserName = "Wyatt"
                        },
                        new
                        {
                            Id = "8l645865-p24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc5da087-9fc8-4c5a-9df4-a3412859abe0",
                            Email = "p@p.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "P@P.COM",
                            NormalizedUserName = "SCARLETT",
                            PasswordHash = "AQAAAAEAACcQAAAAEP4SnABII6bytdrEcCKRpdG07QTOf0zZEjW6ejgF5QlIY8Vl9DrCQX35G6VB1Ylssg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89a9e003-3a09-43c6-a52e-53cc114fa18d",
                            TwoFactorEnabled = false,
                            UserName = "Scarlett"
                        },
                        new
                        {
                            Id = "8l645865-q24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63726e67-32bb-4547-8558-45c6162a3514",
                            Email = "q@q.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Q@Q.COM",
                            NormalizedUserName = "ELLA",
                            PasswordHash = "AQAAAAEAACcQAAAAEHmOGe3j0etqP03ytYDCiK3UHLdnCo1++b9Zl4j/Q6UjrOIaLHnia8qZsbTX22jrag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "117b7ab8-54bf-4758-9e40-c6ea210a027f",
                            TwoFactorEnabled = false,
                            UserName = "Ella"
                        },
                        new
                        {
                            Id = "8l645865-r24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34ed53e2-8a99-4b29-8bf9-59cbde536a80",
                            Email = "r@r.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "R@R.COM",
                            NormalizedUserName = "ELLIE",
                            PasswordHash = "AQAAAAEAACcQAAAAEJWnXVjr/S79AkvR5ip6oBCkQ3rLEyC8L4OD4sYrA9VlVBdhN4BVINd5eckGbssy7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7064089b-9e62-4480-ba03-923eb0cf4646",
                            TwoFactorEnabled = false,
                            UserName = "Ellie"
                        },
                        new
                        {
                            Id = "8l645865-s24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b142a528-eb80-416b-aaaf-989bb0f5fb59",
                            Email = "s@s.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "S@S.COM",
                            NormalizedUserName = "SOFIA",
                            PasswordHash = "AQAAAAEAACcQAAAAEI7udQlSwFmWcF7WhQf2Gw/3hxHKwjB3P6GfMk/BKGLbo8DzFZoeyw9kdoVzSuEDSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dcb84c9a-9201-4719-bece-e9bf12afb04b",
                            TwoFactorEnabled = false,
                            UserName = "Sofia"
                        },
                        new
                        {
                            Id = "8l645865-t24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f17b425b-5e9f-4096-9f52-4e289525ee76",
                            Email = "t@t.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "T@T.COM",
                            NormalizedUserName = "SEBASTIAN",
                            PasswordHash = "AQAAAAEAACcQAAAAECT5/PCL5nrIbzAo970ek2jH4WlzURHsS/sIAhMq1uPbDYe/IP2wpUlFisIYohWHmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d258f9e-85b1-4a50-a6dd-4d0363e8e1d9",
                            TwoFactorEnabled = false,
                            UserName = "Sebastian"
                        },
                        new
                        {
                            Id = "8l645865-u24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e35a75f-242c-4fdd-b19f-276413281b1b",
                            Email = "u@u.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "U@U.COM",
                            NormalizedUserName = "VIOLET",
                            PasswordHash = "AQAAAAEAACcQAAAAEBnaAeP0Hzm2gQ1WegiMD1dHGrIPH7P2a+XBJU1bdBFhTFSJNevBK2FU14HoFPDRyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9588c252-c2e8-409e-852c-a89face97833",
                            TwoFactorEnabled = false,
                            UserName = "Violet"
                        },
                        new
                        {
                            Id = "8l645865-v24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "117508e6-d876-4c8e-a1e1-55097d6d590a",
                            Email = "v@v.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "V@V.COM",
                            NormalizedUserName = "JACK",
                            PasswordHash = "AQAAAAEAACcQAAAAEJKR6nvZtZbugrA5E4tGBNMBFWaxId7qS04CEnVC9+yEfQ4hmyJgJ/tpx1a9f91s1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e9e7527-5332-4c38-a3f4-1c55e7dd725a",
                            TwoFactorEnabled = false,
                            UserName = "Jack"
                        },
                        new
                        {
                            Id = "8l645865-w24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc66016f-0209-4d3d-bfc3-36c3cf0637dc",
                            Email = "w@w.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "W@W.COM",
                            NormalizedUserName = "OWEN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOAOk27JshlBsoUHCoseHqgoLtg1AtnA7NFwOMAJ6RzGL+sqmxdASKHV3dOVbsVI7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e367fdba-b480-4449-a30f-7698eb95b966",
                            TwoFactorEnabled = false,
                            UserName = "Owen"
                        },
                        new
                        {
                            Id = "8l645865-x24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07d4c749-7227-441a-a11b-6e89141dffd6",
                            Email = "x@x.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "X@X.COM",
                            NormalizedUserName = "DANIEL",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ383xUiOn0ECa98/uPOSDeaqYEzE8/2jGiBIprUjGCs40k4pRJoiapiL86oXY7mhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90d2692e-82e0-49a9-b310-f9f3b186d6cd",
                            TwoFactorEnabled = false,
                            UserName = "Daniel"
                        },
                        new
                        {
                            Id = "8l645865-y24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6418bb71-8f9e-4447-85a7-eba2fc71e796",
                            Email = "y@y.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Y@Y.COM",
                            NormalizedUserName = "LAYLA",
                            PasswordHash = "AQAAAAEAACcQAAAAEDmF8kn4q+PGhWiafBEN9iFvPe1WVrzTi08CVm6ce68zNCFIOrE/NnwH0LkomZr35g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b06186fa-410a-40fb-a2cf-f5e3061dee25",
                            TwoFactorEnabled = false,
                            UserName = "Layla"
                        },
                        new
                        {
                            Id = "8l645865-z24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b60ae4c-d37d-4948-bd6c-f9e33b5b87fd",
                            Email = "z@z.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Z@Z.COM",
                            NormalizedUserName = "CAMILA",
                            PasswordHash = "AQAAAAEAACcQAAAAEPzp6G3ZXJoZjdOFF3o99bjXHF4hxR2Eo+fpRBFk7egPjcOBYZ7HYz+NTj4GwrkoVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "34a65cf2-3ddf-46b3-b59b-6692f6c3b889",
                            TwoFactorEnabled = false,
                            UserName = "Camila"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e545865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "8e645865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "60226d81-1906-41cb-8f00-44e34ee158cd"
                        },
                        new
                        {
                            UserId = "8l645865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-b24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-c24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-d24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-e24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-f24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-g24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-h24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-i24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-j24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-k24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-l24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-m24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-n24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-o24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-p24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-q24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-r24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-s24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-t24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-u24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-v24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-w24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-x24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-y24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-z24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Area", b =>
                {
                    b.HasOne("BeanSceneReservationSystem.Data.Restaurant", null)
                        .WithMany("Areas")
                        .HasForeignKey("RestaurantId");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Reservation", b =>
                {
                    b.HasOne("BeanSceneReservationSystem.Data.ReservationSource", "ReservationSource")
                        .WithMany()
                        .HasForeignKey("ReservationSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeanSceneReservationSystem.Data.ReservationStatus", "ReservationStatus")
                        .WithMany()
                        .HasForeignKey("ReservationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeanSceneReservationSystem.Data.Sitting", "Sitting")
                        .WithMany("Reservations")
                        .HasForeignKey("SittingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReservationSource");

                    b.Navigation("ReservationStatus");

                    b.Navigation("Sitting");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.RestaurantTable", b =>
                {
                    b.HasOne("BeanSceneReservationSystem.Data.Area", null)
                        .WithMany("RestaurantTables")
                        .HasForeignKey("AreaId");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Sitting", b =>
                {
                    b.HasOne("BeanSceneReservationSystem.Data.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeanSceneReservationSystem.Data.SittingType", "SittingType")
                        .WithMany()
                        .HasForeignKey("SittingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("SittingType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Area", b =>
                {
                    b.Navigation("RestaurantTables");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Restaurant", b =>
                {
                    b.Navigation("Areas");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Sitting", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
