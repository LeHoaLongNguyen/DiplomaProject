// <auto-generated />
using System;
using BeanSceneReservationSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeanSceneReservationSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Main"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Outside"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Balcony"
                        });
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GuestNumber")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReservationSourceId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("SittingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReservationSourceId");

                    b.HasIndex("ReservationStatusId");

                    b.HasIndex("SittingId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.ReservationSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReservationSources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Online"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Email"
                        },
                        new
                        {
                            Id = 3,
                            Name = "In Person"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Phone"
                        });
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.ReservationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReservationStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Confirmed"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Seated"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Altered"
                        });
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bean Scene"
                        });
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.RestaurantTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("RestaurantTables");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Sitting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("SittingTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("SittingTypeId");

                    b.ToTable("Sittings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 6, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 6, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 6, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 6, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 6, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 6, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 7, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 7, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 7, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 7, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 7, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 7, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 8, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 8, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 8, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 8, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 8, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 8, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 9, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 9, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 11,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 9, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 9, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 12,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 9, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 9, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 13,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 10, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 10, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 14,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 10, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 10, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 15,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 10, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 10, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 16,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 11, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 11, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 17,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 11, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 11, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 18,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 11, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 11, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 19,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 12, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 12, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 20,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 12, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 12, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 21,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 12, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 12, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 22,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 13, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 13, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 23,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 13, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 13, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 24,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 13, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 13, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 25,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 14, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 14, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 26,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 14, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 14, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 27,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 14, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 14, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 28,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 15, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 15, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 29,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 15, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 15, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 30,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 15, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 15, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 31,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 16, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 16, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 32,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 16, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 16, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 33,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 16, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 16, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 34,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 17, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 17, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 35,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 17, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 17, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 36,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 17, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 17, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 37,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 18, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 18, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 38,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 18, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 18, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 39,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 18, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 18, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 40,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 19, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 19, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 41,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 19, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 19, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 42,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 19, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 19, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 43,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 20, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 20, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 44,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 20, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 20, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 45,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 20, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 20, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 46,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 21, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 21, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 47,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 21, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 21, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 48,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 21, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 21, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 49,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 22, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 22, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 50,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 22, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 22, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 51,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 22, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 22, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 52,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 23, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 23, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 53,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 23, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 23, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 54,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 23, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 23, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 55,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 24, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 24, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 56,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 24, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 24, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 57,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 24, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 24, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 58,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 25, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 25, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 59,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 25, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 25, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 60,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 25, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 25, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 61,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 26, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 26, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 62,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 26, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 26, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 63,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 26, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 26, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 64,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 27, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 27, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 65,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 27, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 27, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 66,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 27, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 27, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 67,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 28, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 28, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 68,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 28, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 28, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 69,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 28, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 28, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 70,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 29, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 29, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 71,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 29, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 29, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 72,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 29, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 29, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 73,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 30, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 30, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 74,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 30, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 30, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 75,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 30, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 30, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 76,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 31, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 31, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 77,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 31, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 31, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 78,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 31, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 31, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 79,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 6, 1, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 6, 1, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 80,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 6, 1, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 6, 1, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 81,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 6, 1, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 6, 1, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 82,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 6, 2, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 6, 2, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 83,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 6, 2, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 6, 2, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 84,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 6, 2, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 6, 2, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 85,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 6, 3, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 6, 3, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 86,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 6, 3, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 6, 3, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 87,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 6, 3, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 6, 3, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 88,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 6, 4, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 6, 4, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 89,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 6, 4, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 6, 4, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 90,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 6, 4, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 6, 4, 17, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.SittingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SittingTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Breakfast"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Lunch"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dinner"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "79ccb66a-fa8c-43b9-9856-08bd396ba3c0",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "60226d81-1906-41cb-8f00-44e34ee158cd",
                            ConcurrencyStamp = "e5fee4b7-156a-4426-8ad9-7709e4566527",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "e07d60fb-e2bd-4443-9759-8edc2c65ba17",
                            ConcurrencyStamp = "df44e2ff-0c54-46ba-89b3-c89844523d7b",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e545865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f4061421-8cd5-4172-9a54-683b06133dcf",
                            Email = "Manager@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@TEST.COM",
                            NormalizedUserName = "Manager@test.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEPHCpnwf64h5hcGsdLfso/Ymeuz8hKjHkp1uIVrIDPT0lNFLfYbe8I3L99Ae1ZNFNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f3ee8470-c55e-4284-a708-1700f8130497",
                            TwoFactorEnabled = false,
                            UserName = "Tester"
                        },
                        new
                        {
                            Id = "8e645865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a9fce77-2d69-4245-b151-39565370b173",
                            Email = "Staff@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@TEST.COM",
                            NormalizedUserName = "Staff@test.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBMFVhQcWUTW1SzyN70Ttf3plcerKmIx9CTeLM6XOpJ1m1rr27eHhk/gsdQZoNivPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "770bf031-6a2b-4cab-b504-d8fdb6d99233",
                            TwoFactorEnabled = false,
                            UserName = "Staff@test.com"
                        },
                        new
                        {
                            Id = "8l645865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9069ceb-2913-4ecc-8184-70e4cf662583",
                            Email = "a@a.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "A@A.COM",
                            NormalizedUserName = "A@A.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHCbTxxijofD/5T8Zpc66XY+2xFIlyTJOueAiK4spLLfgGsXVH5LVhTMo6RgXW1LCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ece52e6f-c1c1-4e82-8ac6-dc7e1aea3cdf",
                            TwoFactorEnabled = false,
                            UserName = "John"
                        },
                        new
                        {
                            Id = "8l645865-b24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "346d2aa9-98ea-4288-8f71-283b5ffaa167",
                            Email = "b@b.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "B@B.COM",
                            NormalizedUserName = "B@B.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBMMmpyUdV3wLZP9qOSO+99RLzQ30zzAnVmyYSc3EK/TxzyMqudbhduqSeJsJh1KgQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4ee65e0-3b2a-4512-bba8-7e3ecce95a09",
                            TwoFactorEnabled = false,
                            UserName = "Fred"
                        },
                        new
                        {
                            Id = "8l645865-c24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9562bd3-d6b9-4fef-9ea7-51dc1607f3f5",
                            Email = "c@c.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "C@C.COM",
                            NormalizedUserName = "C@C.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEENtZv9IzrwHRgvsjTage91wm/+HJEXIfsWhregrFghYm3VYrLhL2TI1bpMNdtHIdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b57ec281-e783-4db6-9087-975b90804aaa",
                            TwoFactorEnabled = false,
                            UserName = "Sarah"
                        },
                        new
                        {
                            Id = "8l645865-d24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "178ee8dd-38f9-4359-a8db-dc88f7890c6d",
                            Email = "d@d.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "D@D.COM",
                            NormalizedUserName = "D@D.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE4muhUJVnOpe2PfgBhDlNMh3GgedmArwr9Mi8VutYwp7S547QTmmbEba+f/r5SD+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea8c4ff1-87a3-4089-ac0e-abb5317b177d",
                            TwoFactorEnabled = false,
                            UserName = "Lousie"
                        },
                        new
                        {
                            Id = "8l645865-e24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8d90c2d-4fd1-4227-88ee-ebbb1d4c9fe4",
                            Email = "e@e.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "E@E.COM",
                            NormalizedUserName = "E@E.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBZM2O0V3vtZYqYNjWrNPqCjRUAHTifpUjf8FOAIHrL+nbO4glj8TsTYalXoAKz76g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d5b9d84-8220-4ed5-b8cc-4bee04f082ce",
                            TwoFactorEnabled = false,
                            UserName = "Katie"
                        },
                        new
                        {
                            Id = "8l645865-f24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c069342-0166-4606-b6c0-99be67dbdcff",
                            Email = "f@f.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "F@F.COM",
                            NormalizedUserName = "F@F.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECZ1ax/g1ATML0wVp16dlT5ki6ZfRrFhQg1wkoxZ66vJHMAVYEOkwzL72E4eDp5cJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8945e52f-27f6-40dd-8101-818e64a5bec7",
                            TwoFactorEnabled = false,
                            UserName = "Ben"
                        },
                        new
                        {
                            Id = "8l645865-g24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "40eddd92-1d9d-4c49-b02f-0a4ce03322c7",
                            Email = "g@g.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "G@G.COM",
                            NormalizedUserName = "G@G.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMuBGYMStCojEq2CwFlf7WV/DFGlGnMGQXA6PWknzwPeYwcc+ud3+GwKi4IBq99ezA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51d89aa9-a387-4813-b6b6-1340572d71dd",
                            TwoFactorEnabled = false,
                            UserName = "Lucas"
                        },
                        new
                        {
                            Id = "8l645865-h24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca9a07c5-b0b3-4234-b4e8-261018d216aa",
                            Email = "h@h.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "H@H.COM",
                            NormalizedUserName = "H@H.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJqEm0j4QDQAlThN8KuQ3kGxaLW00gtX1qMD6zknjQW6UYxli+4tw2ib+lfh9kzG9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db83897e-f32e-4fee-a769-aa4685a38e16",
                            TwoFactorEnabled = false,
                            UserName = "Liam"
                        },
                        new
                        {
                            Id = "8l645865-i24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43ec8ec8-117c-4296-a9b9-ff376b800ed1",
                            Email = "i@i.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "I@I.COM",
                            NormalizedUserName = "I@I.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEMcyJzMUvQqeJDTdKH4qZLuAh5NrtKUFiuOxse7438I07hb1hDOKZe5XppdCg0MUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a1efc7c-bb1a-46bf-a1ab-9f2d63a47ff0",
                            TwoFactorEnabled = false,
                            UserName = "Emma"
                        },
                        new
                        {
                            Id = "8l645865-j24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "51dcf6d7-b499-4de6-8a84-1eccbdc6effe",
                            Email = "j@j.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "J@J.COM",
                            NormalizedUserName = "J@J.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELScdShW9QoECW6woTVf2Nrm6nFtK0B4UnvwSa8wFTikSKS3YfMgq7jpFOQmj3do2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f698906a-1f51-44e3-9c9b-0d93e0edaf84",
                            TwoFactorEnabled = false,
                            UserName = "Kayla"
                        },
                        new
                        {
                            Id = "8l645865-k24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22ba8efe-896f-4efb-8f15-72a8bd5aeb93",
                            Email = "k@k.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "K@K.COM",
                            NormalizedUserName = "K@K.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENeFPvc2b/OfxDZN8RNLVMy7D7vDlV9WmeVeEMuv9xbR8DO0DAZT+XW+6xruLghnGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63a1ddd7-b49b-487d-84f5-c53031d4465c",
                            TwoFactorEnabled = false,
                            UserName = "Levi"
                        },
                        new
                        {
                            Id = "8l645865-l24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a0a94a5-0dcb-49b3-a417-1b8fed0cf70d",
                            Email = "l@l.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "L@L.COM",
                            NormalizedUserName = "L@L.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECDI16l057PTacUD98TVwsYnGnEzSvEIihEPSPajjI6p0EBNHkxwUu5OUiEphYNiCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1f6b185-f61d-41e0-861f-9e9339cc2905",
                            TwoFactorEnabled = false,
                            UserName = "Noah"
                        },
                        new
                        {
                            Id = "8l645865-m24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "864b5b78-6f68-4b91-9234-eb8a6cbb9fa8",
                            Email = "m@m.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "M@M.COM",
                            NormalizedUserName = "M@M.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECzVkLTKBf1sLy7hGxVth6JPBUTNchSkxI7qf/WihrdPPLWdLleBJqtsCbuOcZW7lA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c2d8b67-aee3-42fe-83a6-ef6c4eb5fdd9",
                            TwoFactorEnabled = false,
                            UserName = "Oliver"
                        },
                        new
                        {
                            Id = "8l645865-n24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08c45b19-37a3-4d70-9ffc-ca3fcf40abf1",
                            Email = "n@n.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "N@N.COM",
                            NormalizedUserName = "N@N.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEx4tIyRSWpYUz7eCoN2crpqlKNi7Yn2VO4Vy/F8el2lLYilK+T+5DGkyl+3mvVMPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46bc2a00-64db-455f-928f-da63669dcf71",
                            TwoFactorEnabled = false,
                            UserName = "Leo"
                        },
                        new
                        {
                            Id = "8l645865-o24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d26a410-897d-42c2-a6b7-999f57d4aa37",
                            Email = "o@o.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "O@O.COM",
                            NormalizedUserName = "O@O.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIxLcWtZFUTDvw9sH65ZVF/L2vxOjzCWNKd9Hc7h8ewasdJGBKv7qD8Q7dhFOXgy5A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fab6dede-4b9b-4808-a9e1-d6d6df8b48be",
                            TwoFactorEnabled = false,
                            UserName = "Wyatt"
                        },
                        new
                        {
                            Id = "8l645865-p24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf035d72-b8eb-4303-94f3-6dec7c9237a2",
                            Email = "p@p.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "P@P.COM",
                            NormalizedUserName = "P@P.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFISwNy5ZZcm5jFnGVZ0/cbC7/2T6UfHaLbwRjADtqNPnoFYFJResG7gHNb6XNHrSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ca9258f-1316-401e-b1e6-a7a25f3a34e0",
                            TwoFactorEnabled = false,
                            UserName = "Scarlett"
                        },
                        new
                        {
                            Id = "8l645865-q24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2132ba8a-3ff5-498c-b5a2-5d238add08f0",
                            Email = "q@q.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Q@Q.COM",
                            NormalizedUserName = "Q@Q.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM1Z6XofPbK4X4mLQi5NMi8F4l6tKUi6mGnVjijp0vsd7aXn1nkFW9SWRdTw1EUV/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c742bd4c-105b-490c-9e23-6e4c444da80b",
                            TwoFactorEnabled = false,
                            UserName = "Ella"
                        },
                        new
                        {
                            Id = "8l645865-r24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a8e870d-3c12-4ec4-9699-05273b5da5cc",
                            Email = "r@r.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "R@R.COM",
                            NormalizedUserName = "R@R.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMJhD4lGF/lSWC3DsCNaNK5Ymg3psXVW/MUd2vjZ7JxQmXe8pdieTyNzhXUQYZX21Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74b1a6f3-1ba4-40c3-b37a-b675e59e7c52",
                            TwoFactorEnabled = false,
                            UserName = "Ellie"
                        },
                        new
                        {
                            Id = "8l645865-s24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60799b74-246b-4bc9-8c45-c9f29e01aa99",
                            Email = "s@s.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "S@S.COM",
                            NormalizedUserName = "S@S.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENdFLJrhq7/p5pnqqTYdHMTswBl01ZbfHG5GrXkK9L3fZ2G6HGzyFXOQVgladXHLYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a86b49dd-7b70-458c-a94a-16d0bcf9b4f6",
                            TwoFactorEnabled = false,
                            UserName = "Sofia"
                        },
                        new
                        {
                            Id = "8l645865-t24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21d553c4-2cba-4bc4-83bb-8edc3e186470",
                            Email = "t@t.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "T@T.COM",
                            NormalizedUserName = "T@T.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH3DnixNme8Bje7MRS+TooBVQM8IUb3MBV4z/4m3yukugn9hYAYoEC6D7hZAESfueA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "604eec10-c425-4eba-a208-3cbe05c523e4",
                            TwoFactorEnabled = false,
                            UserName = "Sebastian"
                        },
                        new
                        {
                            Id = "8l645865-u24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fddcd979-e9b0-4ddb-af25-39660b5a310c",
                            Email = "u@u.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "U@U.COM",
                            NormalizedUserName = "U@U.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL4/P1Pw2vlXX/tQrEDPJn9B1EOyR7tbkWtEgaeyZ687b754nI07LRyWtSe5FzBFrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b377740c-6467-4c8a-bd60-23e8de584961",
                            TwoFactorEnabled = false,
                            UserName = "Violet"
                        },
                        new
                        {
                            Id = "8l645865-v24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94401c43-4093-42ea-a761-d90abc5ce0af",
                            Email = "v@v.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "V@V.COM",
                            NormalizedUserName = "V@V.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIExHwwwQBXq25Ckh8Fwv4uqPlNEVzbzxfcC0l24ThB+wr1/rWJOfxHid9UuSC9mAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1db4c644-47a2-49da-a96d-f185783de6c4",
                            TwoFactorEnabled = false,
                            UserName = "Jack"
                        },
                        new
                        {
                            Id = "8l645865-w24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "455d614f-6850-425a-82bb-bd866c876454",
                            Email = "w@w.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "W@W.COM",
                            NormalizedUserName = "W@W.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH5fTldAngZkvJoQv3pU/R+z8z5gYpkXksyy00LJxwS7haNGr+76nKo+rffxxh502w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "943eedbc-9d5f-41a7-9f99-f45e5bfc15f0",
                            TwoFactorEnabled = false,
                            UserName = "Owen"
                        },
                        new
                        {
                            Id = "8l645865-x24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ba0fd0a-64af-43ac-b362-4c3caf3d3317",
                            Email = "x@x.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "X@X.COM",
                            NormalizedUserName = "X@X.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENUVU0iKn1vZj/Dils84HTK+zXRJcUl9zy/qGWbQIF4Mn9g6SFfGbeB1/b6iNv4TcA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "50326d89-e710-47f9-855a-9b14c6a626db",
                            TwoFactorEnabled = false,
                            UserName = "Daniel"
                        },
                        new
                        {
                            Id = "8l645865-y24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd1b0835-bea7-4c2b-bf8e-9ee1e6ad7475",
                            Email = "y@y.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Y@Y.COM",
                            NormalizedUserName = "Y@Y.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB3S4/5zN86W7ENBf2gxVMuQrigTVX1CYmsBw/GyAtKjd61eteB3Pol3720F09jAAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce51644b-44c0-4f07-b2ff-2c771cfba6c3",
                            TwoFactorEnabled = false,
                            UserName = "Layla"
                        },
                        new
                        {
                            Id = "8l645865-z24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bcabe1e5-0208-4ed4-81c8-c80f4b1a23a5",
                            Email = "z@z.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Z@Z.COM",
                            NormalizedUserName = "Z@Z.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBo/9BxbwYbdkh1+2f6qr+kQpu7vMHqxLufhyK7oYcj2EmwGgFjxPGxlHkI7fmvlgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0eaa0a99-7d85-4ef7-85c6-1ae8a95884cc",
                            TwoFactorEnabled = false,
                            UserName = "Camila"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e545865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "8e645865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "60226d81-1906-41cb-8f00-44e34ee158cd"
                        },
                        new
                        {
                            UserId = "8l645865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-b24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-c24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-d24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-e24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-f24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-g24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-h24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-i24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-j24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-k24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-l24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-m24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-n24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-o24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-p24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-q24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-r24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-s24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-t24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-u24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-v24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-w24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-x24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-y24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-z24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Area", b =>
                {
                    b.HasOne("BeanSceneReservationSystem.Data.Restaurant", null)
                        .WithMany("Areas")
                        .HasForeignKey("RestaurantId");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Reservation", b =>
                {
                    b.HasOne("BeanSceneReservationSystem.Data.ReservationSource", "ReservationSource")
                        .WithMany()
                        .HasForeignKey("ReservationSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeanSceneReservationSystem.Data.ReservationStatus", "ReservationStatus")
                        .WithMany()
                        .HasForeignKey("ReservationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeanSceneReservationSystem.Data.Sitting", "Sitting")
                        .WithMany("Reservations")
                        .HasForeignKey("SittingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReservationSource");

                    b.Navigation("ReservationStatus");

                    b.Navigation("Sitting");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.RestaurantTable", b =>
                {
                    b.HasOne("BeanSceneReservationSystem.Data.Area", null)
                        .WithMany("RestaurantTables")
                        .HasForeignKey("AreaId");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Sitting", b =>
                {
                    b.HasOne("BeanSceneReservationSystem.Data.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeanSceneReservationSystem.Data.SittingType", "SittingType")
                        .WithMany()
                        .HasForeignKey("SittingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("SittingType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Area", b =>
                {
                    b.Navigation("RestaurantTables");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Restaurant", b =>
                {
                    b.Navigation("Areas");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Sitting", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
