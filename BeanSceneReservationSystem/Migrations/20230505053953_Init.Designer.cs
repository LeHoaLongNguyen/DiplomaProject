// <auto-generated />
using System;
using BeanSceneReservationSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeanSceneReservationSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230505053953_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Main"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Outside"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Balcony"
                        });
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GuestNumber")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReservationSourceId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("SittingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReservationSourceId");

                    b.HasIndex("ReservationStatusId");

                    b.HasIndex("SittingId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.ReservationSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReservationSources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Online"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Email"
                        },
                        new
                        {
                            Id = 3,
                            Name = "In Person"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Phone"
                        });
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.ReservationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReservationStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Confirmed"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Seated"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Altered"
                        });
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bean Scene"
                        });
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.RestaurantTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("RestaurantTables");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Sitting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("SittingTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("SittingTypeId");

                    b.ToTable("Sittings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 6, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 6, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 6, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 6, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 6, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 6, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 7, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 7, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 7, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 7, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 7, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 7, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 8, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 8, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 8, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 8, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 8, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 8, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 9, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 9, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 11,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 9, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 9, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 12,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 9, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 9, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 13,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 10, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 10, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 14,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 10, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 10, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 15,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 10, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 10, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 16,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 11, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 11, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 17,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 11, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 11, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 18,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 11, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 11, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 19,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 12, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 12, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 20,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 12, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 12, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 21,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 12, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 12, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 22,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 13, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 13, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 23,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 13, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 13, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 24,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 13, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 13, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 25,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 14, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 14, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 26,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 14, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 14, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 27,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 14, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 14, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 28,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 15, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 15, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 29,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 15, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 15, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 30,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 15, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 15, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 31,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 16, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 16, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 32,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 16, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 16, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 33,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 16, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 16, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 34,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 17, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 17, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 35,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 17, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 17, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 36,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 17, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 17, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 37,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 18, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 18, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 38,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 18, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 18, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 39,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 18, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 18, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 40,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 19, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 19, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 41,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 19, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 19, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 42,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 19, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 19, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 43,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 20, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 20, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 44,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 20, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 20, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 45,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 20, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 20, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 46,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 21, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 21, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 47,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 21, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 21, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 48,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 21, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 21, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 49,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 22, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 22, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 50,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 22, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 22, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 51,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 22, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 22, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 52,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 23, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 23, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 53,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 23, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 23, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 54,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 23, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 23, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 55,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 24, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 24, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 56,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 24, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 24, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 57,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 24, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 24, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 58,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 25, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 25, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 59,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 25, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 25, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 60,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 25, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 25, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 61,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 26, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 26, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 62,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 26, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 26, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 63,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 26, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 26, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 64,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 27, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 27, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 65,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 27, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 27, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 66,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 27, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 27, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 67,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 28, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 28, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 68,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 28, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 28, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 69,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 28, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 28, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 70,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 29, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 29, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 71,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 29, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 29, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 72,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 29, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 29, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 73,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 30, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 30, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 74,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 30, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 30, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 75,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 30, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 30, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 76,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 5, 31, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 5, 31, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 77,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 5, 31, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 5, 31, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 78,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 5, 31, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 5, 31, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 79,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 6, 1, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 6, 1, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 80,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 6, 1, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 6, 1, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 81,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 6, 1, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 6, 1, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 82,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 6, 2, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 6, 2, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 83,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 6, 2, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 6, 2, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 84,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 6, 2, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 6, 2, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 85,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 6, 3, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 6, 3, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 86,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 6, 3, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 6, 3, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 87,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 6, 3, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 6, 3, 17, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 88,
                            Active = true,
                            Capacity = 30,
                            EndTime = new DateTime(2023, 6, 4, 11, 0, 0, 0, DateTimeKind.Local),
                            Name = "Breakfast",
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2023, 6, 4, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 89,
                            Active = true,
                            Capacity = 40,
                            EndTime = new DateTime(2023, 6, 4, 16, 0, 0, 0, DateTimeKind.Local),
                            Name = "Lunch",
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2023, 6, 4, 12, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 90,
                            Active = true,
                            Capacity = 50,
                            EndTime = new DateTime(2023, 6, 4, 21, 0, 0, 0, DateTimeKind.Local),
                            Name = "Dinner",
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2023, 6, 4, 17, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.SittingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SittingTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Breakfast"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Lunch"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dinner"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "c62c075c-a036-4fb4-b234-3f03ae67182d",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "60226d81-1906-41cb-8f00-44e34ee158cd",
                            ConcurrencyStamp = "8e7c6927-8c08-47f5-bf72-cbfced578fdc",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "e07d60fb-e2bd-4443-9759-8edc2c65ba17",
                            ConcurrencyStamp = "c3c05626-8ad8-4719-b4c0-32a615728c03",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e545865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "acbf05d8-58e1-4abe-b40e-3660a9e94512",
                            Email = "Manager@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@TEST.COM",
                            NormalizedUserName = "Manager@test.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEOWw+SyK5wsChfcw7sPpzli9ma+HmGFouj7rLdtox3KIxUzZHONEBLltOW6GxfJpzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4cb4a235-b8de-4f8c-b87f-124a0ed11989",
                            TwoFactorEnabled = false,
                            UserName = "Manager@test.com"
                        },
                        new
                        {
                            Id = "8e645865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c61e58f-a66e-4b65-849f-24af84c8473c",
                            Email = "Staff@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@TEST.COM",
                            NormalizedUserName = "Staff@test.com",
                            PasswordHash = "AQAAAAEAACcQAAAAENeYoVkOPWkCegpnPQWFfEBSn4L9c13guLfNIMbhvxW/0IH6mHI6Jfy8w44Nplz+Mg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7263dbaa-27d7-41e9-afe5-c3aac7f4779a",
                            TwoFactorEnabled = false,
                            UserName = "Staff@test.com"
                        },
                        new
                        {
                            Id = "8l645865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be1c7840-e337-4075-afb8-f6a217315acf",
                            Email = "a@a.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "a@a.com",
                            NormalizedUserName = "a",
                            PasswordHash = "AQAAAAEAACcQAAAAEGinb6qcBok/wRB6TBk29lMUVvAvjC/Yq8F9yyWxaTCwwwCdM2PT1k2YgwVQDchZ8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4fc8ad6c-a7dd-478d-a758-15abb446c10d",
                            TwoFactorEnabled = false,
                            UserName = "John"
                        },
                        new
                        {
                            Id = "8l645865-b24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c510a19d-b7f6-4f6a-922d-3b67416fb63a",
                            Email = "b@b.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "b@b.com",
                            NormalizedUserName = "b",
                            PasswordHash = "AQAAAAEAACcQAAAAEEWrVj8I/gySqZYcwssoqUn1KO7U8S46QZt/uiWpGjDySCj4/UPOgNCKE3/C2cBopQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ba3a97f2-324d-45da-a22f-ed8514d2e187",
                            TwoFactorEnabled = false,
                            UserName = "Fred"
                        },
                        new
                        {
                            Id = "8l645865-c24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9146253a-0f3a-4bb1-b8da-d90827db396f",
                            Email = "c@c.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "c@c.com",
                            NormalizedUserName = "c",
                            PasswordHash = "AQAAAAEAACcQAAAAELLCqjkiCi/KlbU8rasdhDHroUK+A++JfGUK9KOMHUSjfFphzTynhdhI2Uj/7JFG5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aec19621-efab-4910-92b9-47f20b4a7e02",
                            TwoFactorEnabled = false,
                            UserName = "Sarah"
                        },
                        new
                        {
                            Id = "8l645865-d24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c98a673-dac6-449d-a09a-37f433e327a7",
                            Email = "d@d.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "d@d.com",
                            NormalizedUserName = "d",
                            PasswordHash = "AQAAAAEAACcQAAAAEIt7rwAcyvOGwCsJX/trUaMgqqRSclHWy5NwjI5WcMes52S2oBSgXPpsTurkcPcoRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ba2bb0e-21a3-4361-b665-e7bb10d777c9",
                            TwoFactorEnabled = false,
                            UserName = "Lousie"
                        },
                        new
                        {
                            Id = "8l645865-e24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e690357-0f7c-48c3-b394-6f0119fd08ec",
                            Email = "e@e.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "e@e.com",
                            NormalizedUserName = "e",
                            PasswordHash = "AQAAAAEAACcQAAAAEPVUK7WoWg+NMYhMTWX9HLpwfufkHXhwdyZ+fPyxgP80vGJ3/ROY4F0qImnTLWCr/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77df9dee-3edf-4bef-a627-c8635d32d7ad",
                            TwoFactorEnabled = false,
                            UserName = "Katie"
                        },
                        new
                        {
                            Id = "8l645865-f24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bff2af8c-c5b4-4e48-b44b-2bf73bdea6fe",
                            Email = "f@f.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "f@f.com",
                            NormalizedUserName = "f",
                            PasswordHash = "AQAAAAEAACcQAAAAENLUdfZoqyQGV1hfvIyQ8ZcJqq9Wf7i4a+eJRqvIRwJz7ITBzAsVptt8ZmH/1q5FMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "609e117d-2e3d-4063-9d68-b53c5a1b013e",
                            TwoFactorEnabled = false,
                            UserName = "Ben"
                        },
                        new
                        {
                            Id = "8l645865-g24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "764e603f-6e13-458b-9b12-b2abc3302cc9",
                            Email = "g@g.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "g@g.com",
                            NormalizedUserName = "g",
                            PasswordHash = "AQAAAAEAACcQAAAAEIj5IWZye8m8YKqvF0tNv9LriHhR4VKc3i8AsRTWSno9/xTsJaEwAorgcX93GRJXvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5c226d5-b0c0-4742-b542-596cb652f616",
                            TwoFactorEnabled = false,
                            UserName = "Lucas"
                        },
                        new
                        {
                            Id = "8l645865-h24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d36192c7-dbee-419a-b49b-d245ab42dd55",
                            Email = "h@h.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "h@h.com",
                            NormalizedUserName = "h",
                            PasswordHash = "AQAAAAEAACcQAAAAEKiu64XeCvmvhZcvwnLrhhSYPLF3m3VKT09q6N1IAu4rjfQXKCtaueY9dlRrY5aV3g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77116f72-efc3-4b27-a16e-17969613d49c",
                            TwoFactorEnabled = false,
                            UserName = "Liam"
                        },
                        new
                        {
                            Id = "8l645865-i24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd26b55a-030a-4a83-a775-74c350351840",
                            Email = "i@i.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "i@i.com",
                            NormalizedUserName = "i",
                            PasswordHash = "AQAAAAEAACcQAAAAEC6lBN4qDrIxzp/RHr/1vSyjINpeR1ynuBaZOLizdGCWf8xa3cQlw9RhCGUGok8oXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68c98b68-b0dd-4c9b-8925-f660ed1886c9",
                            TwoFactorEnabled = false,
                            UserName = "Emma"
                        },
                        new
                        {
                            Id = "8l645865-j24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9b1ed31-8535-4890-8c75-83ddd5051ba9",
                            Email = "j@j.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "j@j.com",
                            NormalizedUserName = "j",
                            PasswordHash = "AQAAAAEAACcQAAAAEDFYwsYjIPU+46tW4ZszJTWUw3MuFWn4z+xRrZ8dkUp1NssFX4MiOAro16y7xo4aDA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "805fd986-0a3d-43bf-bcf6-ee9e7a1ea50d",
                            TwoFactorEnabled = false,
                            UserName = "Kayla"
                        },
                        new
                        {
                            Id = "8l645865-k24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bdea119e-4954-4071-87e6-5e06b3b4499e",
                            Email = "k@k.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "k@k.com",
                            NormalizedUserName = "k",
                            PasswordHash = "AQAAAAEAACcQAAAAEOjhddTL/rI+iZaC4u9qh/3pqYkj83MO+h+o+BZveRamcB0vBGIeUWN0HFcUEYlPnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d4382a0-eb2d-4752-aefb-7540948e4af5",
                            TwoFactorEnabled = false,
                            UserName = "Levi"
                        },
                        new
                        {
                            Id = "8l645865-l24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c11a29ed-394f-498f-975f-2a14824e0d7e",
                            Email = "l@l.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "l@l.com",
                            NormalizedUserName = "l",
                            PasswordHash = "AQAAAAEAACcQAAAAELPG9ldb0oAKTyNHFSulUhn/uxP056vWoMxKVV3ODEhjQAyV9dWz820sVp/ixzwRKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8b0d429-540e-41ba-8f41-82d20d777034",
                            TwoFactorEnabled = false,
                            UserName = "Noah"
                        },
                        new
                        {
                            Id = "8l645865-m24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44ec292b-cfb4-4725-a7c5-ddb21244ce66",
                            Email = "m@m.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "m@m.com",
                            NormalizedUserName = "m",
                            PasswordHash = "AQAAAAEAACcQAAAAEDkXwyzHxB5PK3axACQVND/IIqco+anq02p9nqoRpAnEaqY9NLWVixDk9NmEOUTdAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c70173cc-106d-4282-9a78-d23b3714e96c",
                            TwoFactorEnabled = false,
                            UserName = "Oliver"
                        },
                        new
                        {
                            Id = "8l645865-n24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2cc72091-49b9-4471-9035-e8ecfcb16ccc",
                            Email = "n@n.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "n@n.com",
                            NormalizedUserName = "n",
                            PasswordHash = "AQAAAAEAACcQAAAAEC/6dSMR4vQk4p3Uk5DCk+v9CNklhifdcEG9jfZ4wrO4x9dL5u1Dxc0eAFqHikXUjA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed1c2cc5-4823-4769-8359-d0121f3b244e",
                            TwoFactorEnabled = false,
                            UserName = "Leo"
                        },
                        new
                        {
                            Id = "8l645865-o24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2db4a0ba-e020-4cc2-929b-d1fdd8049f5a",
                            Email = "o@o.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "o@o.com",
                            NormalizedUserName = "o",
                            PasswordHash = "AQAAAAEAACcQAAAAEHSI/vCDRXIXHPR9vGgVYrJEiJXQZLl0v5AxUo1FAZyfiD1KqQ4YysHHMdCA3KNVyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f38021d-7e54-40f6-b5ff-ea125bd615c2",
                            TwoFactorEnabled = false,
                            UserName = "Wyatt"
                        },
                        new
                        {
                            Id = "8l645865-p24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b68f20b2-3dc2-4353-9567-b9a48cc5a7e0",
                            Email = "p@p.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "p@p.com",
                            NormalizedUserName = "p",
                            PasswordHash = "AQAAAAEAACcQAAAAELR5fDN/Ys6GwOypMHI7WWvdQkTaE8gcNowfW07aDSvAqyc5ERx6yPLlqGsJwKXqYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c05fa5e-681c-4cba-99b9-736a459bc240",
                            TwoFactorEnabled = false,
                            UserName = "Scarlett"
                        },
                        new
                        {
                            Id = "8l645865-q24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e6c2856-31d5-4e45-bd9c-5b37f85a71fa",
                            Email = "q@q.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "q@q.com",
                            NormalizedUserName = "q",
                            PasswordHash = "AQAAAAEAACcQAAAAEGvJrsRgE7bH9z0d5e4Qgvw9bXFBJFNurSWni8Uz6na3/U5t2b/DYmIUVauNUJp+EQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f741d6ef-84e3-4203-ab60-36f0ed0f51af",
                            TwoFactorEnabled = false,
                            UserName = "Ella"
                        },
                        new
                        {
                            Id = "8l645865-r24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8152f4e7-ae4a-4c27-bc7a-0ba999ed6e4a",
                            Email = "r@r.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "r@r.com",
                            NormalizedUserName = "r",
                            PasswordHash = "AQAAAAEAACcQAAAAECWfhU/MYBmto3fbItKEftTa1AT/7jh0YQB4hdXzR/iNI1zUpIRt1wOtRjH7aTYjpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4f0754bc-3f3c-46d5-a26a-a076a814ad38",
                            TwoFactorEnabled = false,
                            UserName = "Ellie"
                        },
                        new
                        {
                            Id = "8l645865-s24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed9e6e59-80e9-40bc-9ead-8c9efad23f10",
                            Email = "s@s.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "s@s.com",
                            NormalizedUserName = "s",
                            PasswordHash = "AQAAAAEAACcQAAAAECBz8z5r2bBZ/pABPo87VAgiCSgp63GeHASxbqlfHdOlSvrVb7RaDZddWaKc6HPd1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fccbbce2-6387-4822-9144-be23198ab753",
                            TwoFactorEnabled = false,
                            UserName = "Sofia"
                        },
                        new
                        {
                            Id = "8l645865-t24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "61131849-e2f0-46ed-8b44-bd3ee62475f5",
                            Email = "t@t.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "t@t.com",
                            NormalizedUserName = "t",
                            PasswordHash = "AQAAAAEAACcQAAAAEM6tLDYRDIZPWjy5snYXLVR5T3rsAxvIERLy2XItmvUC7xWTz/Z1QXiiO3rvBix44w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d0ecae2b-717c-4895-a884-577101f6ff08",
                            TwoFactorEnabled = false,
                            UserName = "Sebastian"
                        },
                        new
                        {
                            Id = "8l645865-u24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92fe4458-4a89-4e3f-8d0a-823dcff50d3a",
                            Email = "u@u.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "u@u.com",
                            NormalizedUserName = "u",
                            PasswordHash = "AQAAAAEAACcQAAAAEIRp/9Pp1qSjfVYH0ymMuLGN62JJo+luNlTbOcOAB0PB8aQFqNJPdJ3h/fsDQiK6kg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eccf79b8-4ebf-4441-83d7-1484c4f4d367",
                            TwoFactorEnabled = false,
                            UserName = "Violet"
                        },
                        new
                        {
                            Id = "8l645865-v24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78963ea0-b98d-4b0f-be8d-4a2a81ff29d3",
                            Email = "v@v.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "v@v.com",
                            NormalizedUserName = "v",
                            PasswordHash = "AQAAAAEAACcQAAAAEE6aq3XmvfKJpIHXnS5krcmMUC0Lk8Mpyj5w1Cf8iyDkmt/ZUOHMM/HuJ5dOlkWkuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78d71b4c-20e8-4e83-a443-f8ce610f1e91",
                            TwoFactorEnabled = false,
                            UserName = "Jack"
                        },
                        new
                        {
                            Id = "8l645865-w24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a822a190-dffb-45f5-9ac6-54c460af331d",
                            Email = "w@w.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "w@w.com",
                            NormalizedUserName = "w",
                            PasswordHash = "AQAAAAEAACcQAAAAEJbxHIJFXJw4+rZJyscEItr4/77g5MM2VMeEwV2KLa02M3eqFErshtBlzRGLkEM1ag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45980560-76c6-4d09-aa2a-ba78c048f2c9",
                            TwoFactorEnabled = false,
                            UserName = "Owen"
                        },
                        new
                        {
                            Id = "8l645865-x24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe8ed5d6-1a93-45a1-9acd-2d5ae8274fa3",
                            Email = "x@x.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "x@x.com",
                            NormalizedUserName = "x",
                            PasswordHash = "AQAAAAEAACcQAAAAEPd6F0F2xZJZ2QL99fyHiZvEXFWsCu90kuSMAbgBUI1odx7i3/7KungXeUczs+T0oQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "299b5b7a-6d01-4d97-90fb-6f3cc0b7aca9",
                            TwoFactorEnabled = false,
                            UserName = "Daniel"
                        },
                        new
                        {
                            Id = "8l645865-y24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee18b6a8-3843-45f5-9366-37705fdf3e45",
                            Email = "y@y.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "y@y.com",
                            NormalizedUserName = "y",
                            PasswordHash = "AQAAAAEAACcQAAAAEHlNYU90MWSx2CvexrTvvkuQxJSmOBsfvfmrA7IrSNZ2HDeb4hpINWHRcRe6ixcPtg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d67c9759-ca72-421c-9349-953877465cce",
                            TwoFactorEnabled = false,
                            UserName = "Layla"
                        },
                        new
                        {
                            Id = "8l645865-z24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8066cbae-850e-4347-8a3e-a5e782d67a95",
                            Email = "z@z.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "z@z.com",
                            NormalizedUserName = "z",
                            PasswordHash = "AQAAAAEAACcQAAAAEG/0ChmTVDCIVa2EMIQ7FrQgarLYANBAvNj+Y+B7qmNWx9nQZ/T6CIoR8Q7AEw0rvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0095243f-82ce-4998-8571-53916cfc5a2b",
                            TwoFactorEnabled = false,
                            UserName = "Camila"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e545865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "8e645865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "60226d81-1906-41cb-8f00-44e34ee158cd"
                        },
                        new
                        {
                            UserId = "8l645865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-b24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-c24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-d24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-e24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-f24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-g24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-h24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-i24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-j24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-k24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-l24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-m24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-n24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-o24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-p24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-q24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-r24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-s24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-t24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-u24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-v24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-w24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-x24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-y24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        },
                        new
                        {
                            UserId = "8l645865-z24d-4543-a6c6-9443d048cdb9",
                            RoleId = "e07d60fb-e2bd-4443-9759-8edc2c65ba17"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Area", b =>
                {
                    b.HasOne("BeanSceneReservationSystem.Data.Restaurant", null)
                        .WithMany("Areas")
                        .HasForeignKey("RestaurantId");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Reservation", b =>
                {
                    b.HasOne("BeanSceneReservationSystem.Data.ReservationSource", "ReservationSource")
                        .WithMany()
                        .HasForeignKey("ReservationSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeanSceneReservationSystem.Data.ReservationStatus", "ReservationStatus")
                        .WithMany()
                        .HasForeignKey("ReservationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeanSceneReservationSystem.Data.Sitting", "Sitting")
                        .WithMany("Reservations")
                        .HasForeignKey("SittingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReservationSource");

                    b.Navigation("ReservationStatus");

                    b.Navigation("Sitting");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.RestaurantTable", b =>
                {
                    b.HasOne("BeanSceneReservationSystem.Data.Area", null)
                        .WithMany("RestaurantTables")
                        .HasForeignKey("AreaId");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Sitting", b =>
                {
                    b.HasOne("BeanSceneReservationSystem.Data.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeanSceneReservationSystem.Data.SittingType", "SittingType")
                        .WithMany()
                        .HasForeignKey("SittingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("SittingType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Area", b =>
                {
                    b.Navigation("RestaurantTables");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Restaurant", b =>
                {
                    b.Navigation("Areas");
                });

            modelBuilder.Entity("BeanSceneReservationSystem.Data.Sitting", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
